"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from functools import reduce
from itertools import combinations
from factorization import factors

TARGET = 500

def triangle_with_divisors(n):
    mul = lambda x, y :x * y
    def prod(q): return reduce(mul, q, 1)
    t = 1
    i = 1
    while True:
        f = factors(t)
        reps = [k[1] for k in f]
        count = 1
        for s in xrange(1, len(reps) + 1):
            for c in combinations(reps, s):
                count += prod(c)
#        print n, t, f, reps, count
        if count >= n:
            return t
        i += 1
        t += i

if __name__ == '__main__':
    print triangle_with_divisors(5)
    print triangle_with_divisors(6)
    print triangle_with_divisors(8)
    print triangle_with_divisors(TARGET)
